# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "master" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE with Artifact 

on:
  push:
    branches: [ "master" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: cluster-1    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: images # TODO: update to Artifact Registry docker repository
  IMAGE_NAME: vue-gke 

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.7 
        
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    #- id: 'auth'
    #  name: 'Authenticate to Google Cloud'
    #  uses: 'google-github-actions/auth@v0'
    #  with:
    #    token_format: 'access_token'
    #    workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
    #    service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

    - name: Registry Artifact Credentials
      uses: google-github-actions/setup-gcloud@v0.6.0
      with:
        version: '333.0.0'
        service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true

    - name: Build Docker Image
      run: docker build -t $IMAGE_NAME:latest .

    - name: Configure Docker Client
      run: |-
        gcloud auth configure-docker --quiet
        gcloud auth configure-docker us-east1-docker.pkg.dev --quiet
        
    - name: Push Docker Image to Artifact Registry
      run: |-
        docker tag $IMAGE_NAME:latest us-east1-docker.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:latest
        gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://us-east1-docker.pkg.dev
        docker push us-east1-docker.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:latest

    - name: Uninstall previous versions of gcloud
      run: | 
        sudo rm -rf /usr/lib/google-cloud-sdk

    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/setup-gcloud@v0.6.0
      with:
        version: '333.0.0'
        service_account_key: ${{ secrets.GKE_TOKEN_ACCESS }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true

    - name: Deploy to GKE
      run: |
        kubectl apply -f resources.yaml
